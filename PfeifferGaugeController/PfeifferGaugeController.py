#!/usr/bin/env python

#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        PfeifferGaugeController.py
#
# description : Python source for the PfeifferGaugeController and its commands. 
#                This class can be used with TPG261, TPG300 and MaxiGauge devices
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                PfeifferGaugeController are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  srubio@cells.es $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
import time
import inspect,traceback

from fandango.device import Dev4Tango,TimedQueue

## @note Backward compatibility between PyTango3 and PyTango7
if 'PyDeviceClass' not in dir(PyTango): PyTango.PyDeviceClass = PyTango.DeviceClass
if 'PyUtil' not in dir(PyTango): PyTango.PyUtil = PyTango.Util

from VacuumController import *

VALID_TYPES = ('MaxiGauge','TPG300','TPG261')

#PROTOCOL VARIABLES
ETX = '\x03' #Reset the interface
CR = '\x0D' #End of String
LF = '\x0A' #End of String
ENQ = '\x05' #Request for data transmission
ACK = '\x06' #Positive Report Signal
NACK = '\x15' #Negative report Signal
ESC = '\x1B'

GaugeStatus = ['OK','Underrange','Overrange','SensorError','SensorOff','NoSensor','IdentificationError']

TPG261_Status = {0:'Measurement data OK', 1:'Underrange', 2:'Overrange', 3:'Sensor Error', 4: 'Sensor Off (IKR, PKR, IMR, PBR)', 5: 'No sensor', 6:'Identification error'}
TPG261_States = {
 0:PyTango.DevState.ON,
 1:PyTango.DevState.ALARM,
 2:PyTango.DevState.ALARM,
 3:PyTango.DevState.FAULT,
 4:PyTango.DevState.OFF,
 5:PyTango.DevState.FAULT,
 6:PyTango.DevState.FAULT,
 }
 
TPG300Comms = {
    'BufferReset': (ETX+'\r'),
    'PA1': ('PA1\r'),
    'PA2': ('PA2\r'),
    'PB1': ('PB1\r'),
    'PB2': ('PB2\r'),
    'SensorId': (ETX+'\rTID\r'),
    'ProgNum': (ETX+'\rPNR\r'),
    'ErrorStatus': (ETX+'\rERR\r')
    }

MaxiComms = {
    'SensorId': (ETX+'TID\n\r'),
    'ProgNum': (ETX+'PNR\n\r'),
    'ErrorStatus': (ETX+'ERR\n\r')
    }
#@TODO: Is ETX necessary?
MaxiComms.update([('P%d'%i,ETX+'PR%d\n\r'%i) for i in (1,2,3,4,5,6)])

class InvalidChannel(Exception): pass

#==================================================================
#   PfeifferGaugeController Class Description:
#
#         <p>This device requires <a href="http://www.tango-controls.org/Documents/tools/fandango/fandango">Fandango module<a> to be available in the PYTHONPATH.</p>
#         This Device Server allows to communicate with TP261, TPG300 and MaxiGauge Controllers from Pfeiffer.
#         It replaces TPG300GaugeController and MaxiGaugeController device servers
#         The target is reading the pressure from all channels available (2/4/6 depending on Model property).
#
#==================================================================
#     Device States Description:
#
#   DevState.INIT :
#   DevState.ON :
#   DevState.OFF :
#   DevState.ALARM :
#   DevState.UNKNOWN :
#==================================================================

class PfeifferGaugeController(Dev4Tango):
    

    #--------- Add you global variables here --------------------------

    def StateMachine(self):
        #<- Oju! Do not put time consuming code in always_ex_hook
        if self.Model in ('TPG261'): #By Marc Rosanes

            status = TPG261_Status.get(self.Stat,'Unknown')
            status += '\nLast communication received at %s:\n%s'%(time.ctime(self.LastUpdate),self.LastBuffer)
            self.set_status(status)
            self.set_state(TPG261_States.get(self.Stat,PyTango.DevState.UNKNOWN))
            if 0<self.LastUpdate<(time.time()-60.): self.set_state(PyTango.DevState.UNKNOWN)

            if any(p<0 for p in self.Pressures):
                    self.set_state(PyTango.DevState.ALARM)
                    self.set_status('If the TPG 261 is operated with linear gauges (for ex: CMR364), negative pressures may be indicated. \n Possible causes: \n Negative drift \n Offset correction activated with positive offset')
            
        elif self.Model in ('TPG300','MaxiGauge'): #By Sergi Rubio
            if self.SVD.init == False:
                self.set_state(PyTango.DevState.INIT)
            elif self.SVD.errors>=self.SVD.comms:
                self.set_state(PyTango.DevState.FAULT)
            else:
                self.set_state(PyTango.DevState.ON)
            
            status = 'The Device is '+str(self.get_state())+'\n'    
            self.LastBuffer = str(self.SVD.lastrecv)
            if len(self.SVD.lastrecv):
                status = status+'Last communication received at %s: "%s"\n'%(self.SVD.lasttime,self.SVD.lastrecv)
            if self.SVD.errors:
                status = status+str(self.SVD.errors)+' communication errors\n'
            for i in range(len(self.ChannelState)):
                if self.ChannelState[i]!='Unknown':
                    status = status+'P'+str(i+1)+' State is \''+self.ChannelState[i]+'\'' 
                    status = status+'; last value readed is \''+str(self.Pressures[i])+'\''
                    status = status+'\n'
            self.set_status(status)
            
    def add_pressure_attribute(self,attrname,method):
        attrib = PyTango.Attr(attrname,PyTango.DevDouble, PyTango.AttrWriteType.READ)
        props = PyTango.UserDefaultAttrProp()
        props.set_format('%1.2e')
        props.set_unit('mbar')
        attrib.set_default_properties(props)
        self.add_attribute(attrib,method)
            
    def get_channel_command(self,nchan):
        if self.Model in ('TPG261',):
            return None
        if self.Model in ('MaxiGauge',):
            return MaxiComms.get(nchan,MaxiComms.get('P%d'%nchan,None))
        if self.Model in ('TPG300',):
            return TPG300Comms.get(nchan,TPG300Comms.get(('PA1','PA2','PB1','PB2')[nchan-1],None))
        
    
    def read_pressure_attribute(self,nchan,Command):
        result,pstatus = '','Unknown'
        print self.get_name(),': in read_pressure_attribute(',nchan,',',Command,') ...'
        try:
            if self.Model in ('TPG261'): #By Marc Rosanes, only has 2 channels, reads asynchronous, simply parsing the input
                if nchan>2: #
                    self.warning('TPG has only 2 channels!')
                    raise InvalidChannel('TPG has only 2 channels!')
                if (time.time()-self.LastUpdate)<2.: 
                   self.info('Returning previously read value (readings limited to .5Hz)')
                   return self.Pressures[nchan-1]
                #If more than 2 seconds after last good read:
                self.LastBuffer = self.SVD.command_inout('devserreadraw') 
                if not len(self.LastBuffer): raise Exception('Buffer is empty!')
                #We use LastUpdate to keep a control of how often the buffer is emptied
                self.LastUpdate = time.time()
                good_lines = [l for l in self.LastBuffer.split('\n') if l.endswith('\r')]
                last_good_line = self.LastBuffer = good_lines[-1] if good_lines else ''
                self.info('Last line received at %s: %s'%(time.ctime(),last_good_line))
                self.Stat = int(last_good_line.split(',')[0].strip())
                self.Pressures[0] = float(last_good_line.split(',')[1].strip())
                self.Pressures[1] = float(last_good_line.split(',')[3].strip())
                for i,v in enumerate(self.Pressures[:2]):
                    try: 
                        stat = int(last_good_line.split(',')[i*2].strip())
                        self.ChannelState[i] =  '%1.2e'%v if not stat else TPG261_Status.get(stat,'Unknown')
                    except Exception,e: 
                        self.ChannelState[i] = 'ERROR: %s'%(str(e)[:40])
                print(self.Pressures[nchan-1])
                #attr.set_value(self.Pressure)
                return self.Pressures[nchan-1]
                
            elif self.Model in ('TPG300','MaxiGauge'): #By Sergi Rubio
                result=self.SVD.getComm(Command)
                print str(Command)+' returned: '+str(result)
                if result is None: 
                    #raise Exception, 'Hardware not readed yet'
                    print 'Value returned is None(NULL)'
                    PyTango.Except.throw_exception('Value returned is None(NULL)','Hardware not readed yet',inspect.currentframe().f_code.co_name)
                elif ',' not in result:
                    print 'Value returned has wrong format','Received: '+result
                    #PyTango.Except.throw_exception('Value returned has wrong format','Received: '+result,inspect.currentframe().f_code.co_name)
                    PyTango.Except.throw_exception('WRONG_FORMAT','Value returned has wrong format: %s'%result,inspect.currentframe().f_code.co_name)
                try: 
                    pstatus=GaugeStatus[int(result.split(',')[0])]
                    attr_Px_read = getExpNumbers(result.split(',')[1])[0]#float(result)
                except Exception,e: 
                    print traceback.print_exc()
                    self.ChannelState[nchan-1],self.Pressures[nchan-1] = pstatus,-1
                    PyTango.Except.throw_exception(str(e),'ChannelState='+str(pstatus),inspect.currentframe().f_code.co_name)
                #attr.set_quality(PyTango.AttrQuality.VALID)
                self.ChannelState[nchan-1],self.Pressures[nchan-1] = pstatus,attr_Px_read
                return attr_Px_read

        except InvalidChannel, e:
            self.ChannelState[nchan-1],self.Pressures[nchan-1] = ('INVALID'),-1
            PyTango.Except.re_throw_exception(e,"InvalidChannel Exception","read_Px()="+str(result),inspect.currentframe().f_code.co_name)

        except DevFailed, e:
            self.ChannelState[nchan-1],self.Pressures[nchan-1] = (result or 'Unknown'),-1
            PyTango.Except.re_throw_exception(e,"DevFailed Exception","read_Px()="+str(result),inspect.currentframe().f_code.co_name)
            
        except Exception, e:
            print "Exception '",str(e),"' in ",inspect.currentframe().f_code.co_name    
            self.set_status('Last exception was: \n'+str(e)+'\n')#self.get_status()+'\n'+str(e))
            PyTango.Except.throw_exception("Python Exception","Exception: "+str(e),"read_Px()")

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        #PyTango.Device_3Impl.__init__(self,cl,name)
        Dev4Tango.__init__(self,cl,name)
        PfeifferGaugeController.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print "[Device delete_device method] for device",self.get_name()
        self.SVD.event.set()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print "In ", self.get_name(), "::init_device()"
        self.init_my_Logger()
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())
        
        self.init_my_Logger()
        
        self.Pressures=[]
        for i in range(6): self.Pressures.append(0.)
        self.ChannelState=[]
        for i in range(6): self.ChannelState.append('Unknown')
        
        #MRosanes variables
        self.LastBuffer=''
        self.LastUpdate = 0
        self.Stat=13
        
        try:
            if not self.Refresh: # or self.Refresh<1:
                self.Refresh=2
        except Exception:
            self.Refresh=2

        if len(self.SerialLine):
            if self.Model in ('TPG261'): #By Marc Rosanes
                if not getattr(self,'SVD',None):
                    self.SVD = PyTango.DeviceProxy(self.SerialLine) 
                if not getattr(self,'_HasPressureAttribute',None):
                    self.add_pressure_attribute('Pressure',self.read_P1)
                    self._HasPressureAttribute = True
            elif self.Model in ('TPG300','MaxiGauge'): #By Sergi Rubio?
                from VacuumController import SerialVacuumDevice
                self.SVD=SerialVacuumDevice(self.SerialLine,self.Refresh)
                #,self.get_name())
                if self.Model == 'MaxiGauge':
                    [self.SVD.addComm(MaxiComms['P%d'%i]) for i in (1,2,3,4,5,6)]
                    #self.SVD.addComm(ETX+'PR2\n\r')
                elif self.Model == 'TPG300':
                    [self.SVD.addComm(TPG300Comms[k]) for k in ('PA1','PA2','PB1','PB2')]
                self.SVD.PostCommand.append([ENQ,ACK,NACK])
                self.SVD.start()
            else:
                self.set_state(PyTango.DevState.FAULT)
                err = 'Model property requires a valid value (TPG261/TPG300/MaxiGauge)!'
                self.error(err)
                raise RuntimeError, err
        else:
            self.set_state(PyTango.DevState.FAULT)
            self.error('SerialLine property requires a value!')
            raise RuntimeError, str('SerialLine property requires a value!')
        
        #print self.__class__.__name__
        #print '('+self.init_device.im_self
        #print ":"+ self.get_name()+')'+"::"
        #print im_func.__name__+"(...): "
        
        self.set_state(PyTango.DevState.INIT)
        self.info("Device Server "+self.get_name()+' waiting for request.')

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print "In ", self.get_name(), "::always_executed_hook()"
        if self.Model not in VALID_TYPES:
            raise Exception('Wrong Model value, it must be in %s'%str(VALID_TYPES))
        try:
            self.StateMachine()
        except Exception,e:
            self.error('Exception in always_executed_hook: %s'%str(e))

#==================================================================
#
#    PfeifferGaugeController read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        print "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#    Read P1 attribute
#------------------------------------------------------------------
    def read_P1(self, attr):
        print "In ", self.get_name(), "::read_P1()"
        
        #    Add your own code here
        attr.set_value(self.read_pressure_attribute(1,self.get_channel_command(1)))


#------------------------------------------------------------------
#    Read P2 attribute
#------------------------------------------------------------------
    def read_P2(self, attr):
        print "In ", self.get_name(), "::read_P2()"
        
        #    Add your own code here
        attr.set_value(self.read_pressure_attribute(2,self.get_channel_command(2)))

#------------------------------------------------------------------
#    Read P3 attribute
#------------------------------------------------------------------
    def read_P3(self, attr):
        print "In ", self.get_name(), "::read_P3()"
        
        #    Add your own code here
        attr.set_value(self.read_pressure_attribute(3,self.get_channel_command(3)))


#------------------------------------------------------------------
#    Read P4 attribute
#------------------------------------------------------------------
    def read_P4(self, attr):
        print "In ", self.get_name(), "::read_P4()"
        
        #    Add your own code here
        attr.set_value(self.read_pressure_attribute(4,self.get_channel_command(4)))


#------------------------------------------------------------------
#    Read P5 attribute
#------------------------------------------------------------------
    def read_P5(self, attr):
        print "In ", self.get_name(), "::read_P5()"
        
        #    Add your own code here
        attr.set_value(self.read_pressure_attribute(5,self.get_channel_command(5)))


#------------------------------------------------------------------
#    Read P6 attribute
#------------------------------------------------------------------
    def read_P6(self, attr):
        print "In ", self.get_name(), "::read_P6()"
        
        #    Add your own code here
        attr.set_value(self.read_pressure_attribute(6,self.get_channel_command(6)))


#------------------------------------------------------------------
#    Read ChannelState attribute
#------------------------------------------------------------------
    def read_ChannelState(self, attr):
        print "In ", self.get_name(), "::read_ChannelState()"
        
        #    Add your own code here
        #for i in range(6):
            #s = self.SVD.getComm('P'+str(i+1))
            #try:
                #float(s)
                #s='OK'
            #except:
                #pass
            #self.ChannelState[i] = s or 'Unknown'
        attr_ChannelState_read = self.ChannelState
        attr.set_value(attr_ChannelState_read)
        
#------------------------------------------------------------------
#    Read Model attribute
#------------------------------------------------------------------
    def read_Model(self, attr):
        print "In ", self.get_name(), "::read_Model()"
        
        #    Add your own code here
        attr.set_value(self.Model)


#==================================================================
#
#    PfeifferGaugeController command methods
#
#==================================================================

#------------------------------------------------------------------
#    SendCommand command:
#
#    Description: 
#    argin:  DevString    
#    argout: DevString    
#------------------------------------------------------------------
    def SendCommand(self, argin):
        print "In ", self.get_name(), "::SendCommand()"
        #    Add your own code here
        
        return argout

#------------------------------------------------------------------
#       DevSerReadRaw command:
#
#       Description: read the last good pressure
#                
#       argin:  DevVoid 
#       argout: DevString       last buffer read
#------------------------------------------------------------------
    def DevSerReadRaw(self):
            # print "In ", self.get_name(), "::Read_pressure()"
            # #     Add your own code here
            
            return self.LastBuffer

#==================================================================
#
#    PfeifferGaugeControllerClass class definition
#
#==================================================================
class PfeifferGaugeControllerClass(PyTango.PyDeviceClass):

    #    Class Properties
    class_property_list = {
        'Refresh':
            [PyTango.DevDouble,
            "Refresh period (s) for each attribute of the device.",
            [ 1. ] ],
        }


    #    Device Properties
    device_property_list = {
        'SerialLine':
            [PyTango.DevString,
            "Serial line device server used to communicate with the Gauge Controller",
            [] ],
        'Model':
            [PyTango.DevString,
            "MaxiGauge or TPG300 or TPG261",
            [ "NONE" ] ],
        }


    #    Command definitions
    cmd_list = {
        'SendCommand':
            [[PyTango.DevString, ""],
            [PyTango.DevString, ""],
            {
                'Display level':PyTango.DispLevel.EXPERT,
            } ],

        'DevSerReadRaw':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevString, "none"],
            {
                'Display level':PyTango.DispLevel.EXPERT,
            } ],
        }


    #    Attribute definitions
    attr_list = {
        'P1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"mbar",
                'format':"scientific;uppercase;setprecision(3)",
            } ],
        'P2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"mbar",
                'format':"scientific;uppercase;setprecision(3)",
            } ],
        'P3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"mbar",
                'format':"scientific;uppercase;setprecision(3)",
            } ],
        'P4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"mbar",
                'format':"scientific;uppercase;setprecision(3)",
            } ],
        'P5':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"mbar",
                'format':"scientific;uppercase;setprecision(3)",
            } ],
        'P6':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit':"mbar",
                'format':"scientific;uppercase;setprecision(3)",
            } ],
        'ChannelState':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 6],
            ],
        'Model':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            ],
        }


#------------------------------------------------------------------
#    PfeifferGaugeControllerClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.PyDeviceClass.__init__(self, name)
        self.set_type(name);
        print "In PfeifferGaugeControllerClass  constructor"

#==================================================================
#
#    PfeifferGaugeController class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.PyUtil(sys.argv)
        py.add_TgClass(PfeifferGaugeControllerClass,PfeifferGaugeController,'PfeifferGaugeController')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
